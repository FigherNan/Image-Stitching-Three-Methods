function T = transfer_caculate(points1, points2)
%   输入： points1：动点，
%           points2：参考点
%           
%	输出： T：变换矩阵
%
%	功能：根据动点和参考点，计算出变换矩阵
%

%利用奇异值分解计算T
%生成A矩阵
A = zeros(8,9);
% points1=[18.250000000000000,1.757500000000000e+02;62.750000000000000,1.762500000000000e+02;88.749999999999990,3.302500000000000e+02;25.250000000000000,3.302500000000000e+02];
% points2=[1.552500000000000e+02,1.747500000000000e+02;1.967500000000000e+02,1.722500000000000e+02;2.332500000000000e+02,3.227500000000000e+02;1.702500000000000e+02,3.172500000000000e+02];
    A(:,3) = [1;0;1;0;1;0;1;0];
    A(:,6) = [0;1;0;1;0;1;0;1];
    
    A(1,1:2)=points1(1,1:2);
    A(3,1:2)=points1(2,1:2);
    A(5,1:2)=points1(3,1:2);
    A(7,1:2)=points1(4,1:2);
    
    A(2,4:5)=points1(1,1:2);
    A(4,4:5)=points1(2,1:2);
    A(6,4:5)=points1(3,1:2);
    A(8,4:5)=points1(4,1:2);
    
    x_point1_x_point2 = points2(:,1) .* points1(:,1);
    x_point1_y_point2 = points2(:,1) .* points1(:,2);
    x_point2_y_point1 = points2(:,2) .* points1(:,1);
    y_point1_y_point2 = points2(:,2) .* points1(:,2);
    
    A(1:2:end,7) = -x_point1_x_point2;
    A(1:2:end,8) = -x_point1_y_point2;
    A(2:2:end,7) = -x_point2_y_point1;
    A(2:2:end,8) = -y_point1_y_point2;
    A(1:2:end,9) = -points2(:,1);
    A(2:2:end,9) = -points2(:,2);

   %奇异值分解
    [U,S,V] = svd(A);
    
    %提取右奇异值向量
    h = V(:,9) ./ V(9,9);
    
    %A'A*V=aV
    T= reshape(h,3,3);
    
    
%     p=zeros(4,3);
%     p(:,1)=points1(:,1);
%     p(:,2)=points1(:,2);
%     p(:,3)=[1;1;1;1];
%     p1=p*T;
%     
%     b=A(:,:)*V(:,1);
%     c=V(9,9);
%     d=A*V;
%     e=A'*A;
end